openapi: 3.0.0
info:
  title: MyWeb API
  version: 1.0.0
servers:
  # 请根据部署环境替换为实际后端地址和端口，例如: http://localhost:${BACKEND_PORT:-3000}
  - url: http://localhost:3000
paths:
  /api/wallpapers:
    get:
      summary: List wallpapers (supports pagination)
      parameters:
        - in: query
          name: groupId
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Wallpaper'
    post:
      summary: Upload wallpaper (multipart/form-data)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                groupId:
                  type: integer
                name:
                  type: string
      responses:
        '201':
          description: Created

  /api/wallpapers/active:
    get:
      summary: Get active wallpaper
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWallpaper'

  /api/wallpapers/random:
    get:
      summary: Get random wallpaper from a group
      parameters:
        - in: query
          name: groupId
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWallpaper'

  /api/wallpapers/{id}:
    get:
      summary: Get wallpaper by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseWallpaper'

    put:
      summary: Update wallpaper
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WallpaperUpdate'
      responses:
        '200':
          description: OK

    delete:
      summary: Delete wallpaper
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted

  /api/wallpapers/move:
    put:
      summary: Move multiple wallpapers to a group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                groupId:
                  oneOf:
                    - type: integer
                    - type: 'null'
      responses:
        '200':
          description: OK

  /api/wallpapers/batch-delete:
    delete:
      summary: Delete multiple wallpapers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: integer
      responses:
        '200':
          description: OK

  /api/wallpapers/groups:
    get:
      summary: List groups
      responses:
        '200':
          description: OK

    post:
      summary: Create group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupCreate'
      responses:
        '201':
          description: Created

  /api/wallpapers/groups/{id}:
    put:
      summary: Update group
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupUpdate'
      responses:
        '200':
          description: OK

    delete:
      summary: Delete group
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted

  /api/wallpapers/groups/current:
    get:
      summary: Get current group
      responses:
        '200':
          description: OK

    put:
      summary: Set current group
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK

  /api/myapps:
    get:
      summary: List apps
      responses:
        '200':
          description: OK

    post:
      summary: Create app
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppCreate'
      responses:
        '201':
          description: Created

  /api/myapps/{id}:
    get:
      summary: Get app by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK

    put:
      summary: Update app
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUpdate'
      responses:
        '200':
          description: OK

    delete:
      summary: Delete app
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted

  /api/files/upload:
    post:
      summary: Upload files
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Created

  /api/music/upload:
    post:
      summary: Upload music files (mp3/flac/etc)
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMusicTracks'

  /api/music/tracks:
    get:
      summary: List all uploaded music tracks
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
        - in: query
          name: search
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMusicTrackList'

  /api/music/tracks/{id}:
    get:
      summary: Get a specific music track
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMusicTrack'
    patch:
      summary: Update music metadata (title/artist/album)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MusicTrackUpdate'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMusicTrack'
    delete:
      summary: Delete a music track and its file
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted

  /api/music/tracks/{id}/stream:
    get:
      summary: Stream audio data (supports Range header)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Audio stream
          content:
            audio/mpeg:
              schema:
                type: string
                format: binary

components:
  schemas:
    Wallpaper:
      type: object
      properties:
        id:
          type: integer
        mimeType:
          type: string
        groupId:
          type: integer
        name:
          type: string
        isActive:
          type: boolean
        filePath:
          type: string

    ResponseWallpaper:
      type: object
      properties:
        code:
          type: integer
        data:
          $ref: '#/components/schemas/Wallpaper'
        message:
          type: string

    WallpaperUpdate:
      type: object
      properties:
        name:
          type: string

    GroupCreate:
      type: object
      properties:
        name:
          type: string
        isDefault:
          type: boolean
      required: [name]

    GroupUpdate:
      type: object
      properties:
        name:
          type: string
        isCurrent:
          type: boolean

    AppCreate:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        icon_filename:
          type: string
      required: [name, slug]

    AppUpdate:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        description:
          type: string

    MusicTrack:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        artist:
          type: string
        album:
          type: string
        genre:
          type: string
        durationSeconds:
          type: integer
        bitrate:
          type: integer
        sampleRate:
          type: integer
        fileUrl:
          type: string
        streamUrl:
          type: string
        downloadUrl:
          type: string
        fileId:
          type: integer
        originalName:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    MusicTrackUpdate:
      type: object
      properties:
        title:
          type: string
        artist:
          type: string
        album:
          type: string
        genre:
          type: string

    ResponseMusicTrack:
      type: object
      properties:
        code:
          type: integer
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/MusicTrack'
        message:
          type: string

    ResponseMusicTrackList:
      type: object
      properties:
        code:
          type: integer
        success:
          type: boolean
        data:
          type: object
          properties:
            tracks:
              type: array
              items:
                $ref: '#/components/schemas/MusicTrack'
            pagination:
              type: object
              properties:
                page:
                  type: integer
                limit:
                  type: integer
                total:
                  type: integer
                totalPages:
                  type: integer
        message:
          type: string

    ResponseMusicTracks:
      type: object
      properties:
        code:
          type: integer
        success:
          type: boolean
        data:
          oneOf:
            - $ref: '#/components/schemas/MusicTrack'
            - type: array
              items:
                $ref: '#/components/schemas/MusicTrack'
        message:
          type: string
